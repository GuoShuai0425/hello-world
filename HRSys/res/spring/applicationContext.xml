<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	">
	<context:component-scan base-package="com">
	</context:component-scan>
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 获取多个配置文件时，配置就需要使用locations -->
		<property name="locations">
			<list>
				<value>classpath:resourse.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql:///HRSys" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<!-- 通过JNDI配置DataSource -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName"> <value>java:comp/env/jdbc/oa</value> </property> 
		</bean> -->

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.entity</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
				
				
				<!-- 
				<prop key="hibernate.hbm2ddl.auto">create</prop> 
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> 
					<prop key="hibernate.cache.use_second_level_cache">true</prop> <prop key="hibernate.cache.use_query_cache">true</prop> -->

			</props>
		</property>
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />

	<!-- 配置事务管理器:(这是作为公共使用的事务管理器Bean。这个会是事先配置好的，不需各个模块各自去配) -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- txAdvice:（声明性事务配置） 配置事务的传播特性: -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- tx:attributes:标签所配置的是作为事务的方法的命名类型 -->
		<tx:attributes>
			<!-- 其中 如:'save*'的*为通配符，即代表以save为开头的所有方法，即表示符合此命名规则的方法作为一个事务。 propagation="REQUIRED"代表支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择 
				name 是 与事务属性关联的方法名。通配符（*）可以用来指定一批关联到相同的事务属性的方法。 如：'get*'、'handle*'、'on*Event'等等。 
				propagation 不 REQUIRED 事务传播行为 isolation 不 DEFAULT 事务隔离级别 timeout 不 -1 事务超时的时间（以秒为单位） 
				read-only 不 false 事务是否只读？ -->
			<!-- 
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="upd*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="end*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="count*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" />
			<tx:method name="list*" propagation="REQUIRED" />
			-->
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置参与事务的类 -->
	<aop:config expose-proxy="true">
		<!-- aop:pointcut:标签配置参与事务的类: 只对业务逻辑层实施事务，由于是在Service中进行数据库业务操作，配的应该是包含那些作为事务的方法的Service类 
			详细说明： 首先应该特别注意的是id的命名，同样由于每个模块都有自己事务切面， 所以我觉得初步的命名规则因为 all+模块名+ServiceMethod。 
			而且每个模块之间不同之处还在于以下一句： expression="execution(* com.brainsoon..service..*.*(..))" 
			其中第一个*代表通配：任意返回值类型， 第二*代表通配:service下子包任意class， 第三个*代表通配:包下任意class的任意方法， “（..）”代表通配:方法可以有0个或多个参数 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.dao..*.*(..))" />
		<!-- aop:advisor:就是把上面我们所配置的事务管理两部分属性整合起来作为整个事务管理 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>





</beans>